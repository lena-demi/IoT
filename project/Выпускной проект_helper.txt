 _____________________
|                     |
| Т Р Е Б О В А Н И Я |
|_____________________|

ЭТАП 1. ЭМУЛИРОВАНИЕ ДАННЫХ

2 устройсттва
подключение к rightech iot cloud по mqtt
отправлять значения параметров:
	- 10 и более параметров подвижного устройста 
	- 5 и более параметров стационарного устройства
получать команды из платформы
обеспечить реакцию на команды

ЭТАП 2. РАБОТА НА ПЛАТФОРМЕ RIGHTECH

Цифровые двойники - модели
Объекты для подключения устроойств
Подклюючение эмуляторов
Обработчик со статусом (туда, обратно, стоит)
Геозона
Автоматы:
	регуляция-контроль температуры
	реакция на въезд в геозону (информационное уведомление + отображение на дисплее оостановки)
	Глушить двигатель в случае перегрева
	Отправлять в телегу сообщение, если кто-то нажал на кнопку тревоги или 
	! 1 из автоматов должен отправлять уведомления критического уровня при наступлении конкретных событий (Перегрев двигателя)
	*качество вождения (?) - если успею
	*включать лампочки при плохой освещенности (?) - я бы это на эмуляторе сделала, но м.б. и автоматом

ЭТАП 3. РАБОТА С API

Интерактивная виззуализация:
	Time series (изменение температуры, несколько графиков) - Т на улице, Т в салоне, Т под капотом
	Time series (освещенность, 2 графика: салон и остановка)
	Radial Gauge (круговая диаграма с 3 смысловыми диапазонами, например, для скорости автобуса или для его заполненности)
	Bar guahe (гистограмма: Статистику собрать. ?Качество вождения: скорость, тряска, резкие торможения; ?салон: температура, свет, вес) х2
	Stat (тест, статус автобуса + номер автобуса)
	State timeline (Изменение статуса с течением времени)
С помощью вебхуков по геозоне отправлять уведомления:
	Автобус подъезжает
	Автобус начал маршрут туда (в сторону остановки А)
	Автобус начал маршрут обратно (в сторону остановки Б)
С помощью вебхуков отправлять в телегу сообщения:
	Автобус перегрелся
	*Водитель плохо водит (?) - если успею
_________________________________________________________________________________________________________________________________________________________________

 _________________
|                 |
| К Р И Т Е Р И И |
|_________________|

1 балл - эмулятор подвижного устройства подклюючается к платформе
1 балл - эмулятор стационарного устройства подключается к платформе
3 балла - эмулятор подвижного устройства отправляет 10 и более параметров
2 балла - эмулятор стационарного устройства отправляет 5 и более параметров
2 балла - эмулятор подвижного устроййства реагирует на команды
1 балл - эмулятор стационарного устройства реагирует на команды
___
2 балла - модель подвижного устройства
1 балл - модель стационарного устройства
0,5 балла - объект поодвижного устройства
0,5 балла - объект стационарного устройства
4 балла - ообработчик данных
2 балла - геозона распооложения стационарного устройства
4 балла - автомат с отправкой команд при получении определенных значений
3 балла - автомат контроля геозоны
3 балла - автомат с уведомлениями
___
1 балл - Time series для параметров 1го типа
1 балл - Time series для параметров 2го типа
1 балл - Radial Gauge с заданными диапазонами
1 балл - Bar gauge для параметров подвижного устройства
1 балл - Bar gauge для параметров стационарного устройства
5  баллов -  Вебхук, который вызывается из автомата контроля геозоны и отправляет уведомления в Телеграм (при входе и выходе)
___
2 балла - Модель, объект, параметры и команды сопровождены текстовым оописанием
1,5 балла - В моделе есть параметры с индикацией в виде иконок и уровней
1,5 балла - Состояния автомата имеюют название и описание
2 балла - есть Stat панель
3 балла - есть State timeline модель с полосой дискретного изменения статуса текстового параметра
			 ________________________________
			|                                |
			| НЕОБХОДИМЫЙ МИНИМУМ: 35 баллов |
			|________________________________|
_________________________________________________________________________________________________________________________________________________________________

 _________________
|                 |
| РАБОЧИЙ ДНЕВНИК |
|_________________|

ПЛАН ЗАХВАТА МИРА
+ Составить план :)
+- На бумаге накидать модель остановки (параметры, команды, какие данные  надо будет эмулировать)
+ На бумаге накидать модель автобуса (параметры, команды, какие данные надо будет эмулировать)
+ Написать код для класса  "остановка" -ОСТАЛСЯ КОЛБЭК НА КНОПКУ АЛАМРА (БЛОКИРОВКА КНОПКИ)
+ Написать код для класса "автобус"
- Написать функции, эмулирующие данные
- Написать подключение к mqtt (2 варианта: локальное для тестирования и rightech)
- Объединить воедино код эмулятора
- Протестировать эмулятор
*Разобраться с подключением своих модулей (чтобы интерфейс и основной код были в разных файлах) (?) - если будет время
- Нарисовать GUI
- Написать GUI
- Модель остановки
- Модель автобуса
- Протестировать подключение
- Продумать систему обработчиков и автоматов
- Написать план дальнейших действий.

*** ПОЛЕЗНОЕ *** (Лена, удаляй те моменты, которые уже учтены)

-> Данные от автобуса приходят JSONчиком, а обработчик их парсит и раскладывает по параметром остановки
-> Кнопка тревоги: нажали -> команда спецслужбам, 15 минут горит красная лампочка, status = on -> спустя эти 15 минут status=off
	Предполагается, что человек нажал кнопку тревоги, в течение 15 минут спецслужбы реагируют на сигнал (а кнопка не реагирует на новые нажатия).
	Отменить сигнал нельзя.
-> Хочу в GUI остановки нарисовать дисплей, который будет включать в себя несколько блоков:
	Дата-Время + температура
	"Дисплей" с инфой  об автобусах
		- №, время до, заполненность
-> Хочу в GUI остановки выводить название остановки и маршруты, которые на ней останавливаются
-> Хочу в GUI остановки сделать кнопку тревоги кнопкой, которая будет менять цвет (и рядом с которой будет указано время реагирования)
-> *Как  определить время до прибытия автобуса? - это делает обработчик! - (?) если успею
	1) Длина маршрута, % пройденности маршрута, остановка на x%, автобус на y% едет со скоростью V, 1 % = m м, рассчитываем t на 1 % и время до остановки
	2) Через координаты и траекторию?
!!! -> !!! ВАЖНОЕ !!! Нафиг пока что время до прибытия автобуса, буду обходиться геозонами: 
	- (автобус будет) в течение 10 минут, 
	- (автобус будет) в течение 5 минут, 
	- (автобус) подъезжает
-> После того, как автобус выехал из зоны - очистить дисплей!
-> Для эмуляции движения: сделать бота, прогнать его по маршруту, выгрузить JSON с историей и загрузить его в эмулятор. Когда V = 0 - меняется заполненность.
-> *Сделать отдельные параметры: вес пассажиров и заполненность автобуса и высчитывать 1 в другое :) (?) - если успею
-> Перегрев: критическое сообщение, сообщение в телегу + автомат "перегрев + остановка => не заводится пока не остынет"
-> Поставить ограничение на количество людей (больше максимума народ банально не влезет, ниже 0 не станет)
-> Климат-контроль и лампочки делаю автоматами
!!! -> Не забудь добавить в презентацию/инфо/readme:
	- Параметры освещенности (когда включаются лампочки)
	- Параметры климат-контроля (когда на какое состояние она меняется, при каких температурах)
Основной цикл: 5 сек, т.е. каждые 5 сек отправляются данные и идет опрос эмуляторов.
Каждые 5 сек идет проверка тревожной кнопки: (! в момент срабатывания кнопки запустить таймер глобальная переменная deadline = datetime.now() + timedelta(minutes = self.alarm_duration))
if self.alarm == True and t-datetime.now() >= 1

*** КОНЕЦ БЛОКА ***
______________________________________
МОДЕЛЬ ОСТАНОВКИ
Параметры:
*** - параметры, которые не отправляются
	1) Т на улице
	2) Датчик освещенности
	3) Статус освещения (вкл/выкл)
	4) Статус кнопки тревоги (вкл/выкл)
	5) Время работы лампочки тревоги (кнопки тревоги): в течение этого времени кнопка не реагирует на новые нажатия, лампочка горит.
	*** 6) "Дисплей" - Данные об автобусе(-ах), останавливающихся на остановке:
		- № автобуса - конфиг
		- Статус автобуса (1=туда (т.е. остановится), 0=стоит, -1=обратно) - получает от автобуса, default = None
		- Заполненность автобуса - получает от автобуса, default = None
		- Время до прибытия автобуса - получает от автобуса, default = "Неизвестно"
	*** 7) Название остановки
	*** 8) Маршруты, которые останавливаются на остановке
	*** 9) ID остановки, совпадает с ID в rightech
Команды:
	1) Включить/выключить освещение
	2) Нажать кнопку тревоги
	3) Поменять длительность работы лампочки тревоги
	*4) Поменять критическую освещенность, при которой включаются лампочки (?) - если будет время
Топики mqtt:
>> - Для этих топиков нужен callback
	1) stop/info - сюда остановка отправляет свои параметры в формате JSON (Т, освещенность, статус освещения, статус кнопки тревоги, длительность тревоги)
		эти сообщения идут с retain!
     >> 2) stop/light - управление освещением (без параметров, плевать на пэйлоад)
     >> 3) stop/alarm  - сообщение о тревоге (здесь нужен q1)
     >> 4) stop/alarm/time - задать длительность работы тревожной лампочки (время реагирования), payload = новой длительности в минутах
     >> 5) stop/bus - вывести на дисплей инфу об автобусе

Надо эмулировать (нужны функции):
	+ 1) Т на улице (рандом)
	+ 2) Освещенность (синусоида) + автоматическое включение света
______________________________________
МОДЕЛЬ АВТОБУСА
Параметры:
*** - параметры, которые не отправляются
	1) Т в салоне
	2) Т под капотом
	3) Статус работы климат-контроля (1 - обогрев, 0 - выключена, -1 - кондиционер)
	4) Заполненность
	5) Координаты
	6) Скорость
	7) Направление: туда или обратно
	8) Освещенность
	9) Статус лампочек (вкл/выкл)
	10) Статус мотора (вкл/выкл)
	***11) ID совпадает с Rightech
	***12) Номер автобуса

	self.T_bus = 20
        self.T_motor = 20
        self.climat_control = 0 # 0 - выключено, 1 - обогрев, -1 - охлаждение
        self.people = 0 # ЕИ = [%]
        self.GPS = {"lon": 0, "lat": 0} # ЛЕНА поставь сюда координаты автопарка :)
        self.velocity = 0
        self.light = 0
        self.light_status = False
        self.motor = True

Команды:
	1) Блокировать (выключить) мотор
	2) Управление системой климат-контроля:
		- Выключить
		- Сделать теплее
		- Сделать прохладнее
	3) Включить/выключить свет
	4) Изменить кол-во народа
Топики mqtt:
>> - Для этих топиков нужен callback
	1) bus/info - сюда автобус отправляет свои параметры в формате JSON (retain)
     >> 2) bus/block - Блокировать (выключить) мотор (для случая перегрева, только через автомат? q1)
     >> 3) bus/climat-control/heat - Включить нагрев
     >> 4) bus/climat-control/cool - Включить кондей
     >> 5) bus/climat-control/off - Выключить
     >> 6) bus/light - Вкл/выкл освещение
     >> 7) bus/people - Изменить кол-во народа (payload = + вес)

Надо эмулировать (нужны функции):
	+ 1) Т в салоне:
		- климат-контроль выключен -> рандомное +-(dТ)
		- климат-контроль включен, обогрев -> + dT
		- климат-контроль включен, охлаждение -> - dT
	+ 2) Т под капотом (линейная функция: мотор вкл -> возрастает, мотор выкл -> убывает)
	3) Движение:
		- координаты
		- скорость
		- заполненность (рандом, только на остановках)
		*статус с направлением  движения - определяется  обработчиком на платформе
	+ 4) Освещенность (синусоида)

__________________
Эмулятор движения:
__________________
??? Много вопросов, мало ответов :/
Скорость может быть не 0, только если мотор включен
Координаты могут меняться только если скорость > 0
Перед остановками скорость замедляется

отдельный элемент с измменениями координат
если скорость > 0, координаты меняются
если координаты = коордиинатами остановки

________________________________
Эмулятор изменения освещенности:
________________________________
Изменяется по закону гармонических колебаний:
Освещенность = (Освещенность_max/2)*cos((2pi/T)*t - pi) + (Освещенность_max/2)
Освещенность_max = 110000
[t] = [мин]
Т = 1440 мин = 24 ч (т.е. сутки)
конечная формула: 55000*cos((2*pi/1440)*t-pi)+55000